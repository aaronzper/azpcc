use std::str::FromStr;

use crate::ast::*;
use crate::ast::types::*;
use crate::ast::declaration::*;
use crate::ast::expressions::*;
use crate::parser::helpers::*;

use lalrpop_util::ParseError;

grammar;

match {
    r"([A-Za-z_][A-Za-z0-9_]*)" => Identifier,
    r"\d*" => IntLiteral,
    r#"'(?:\\(?:[abfnrtv\\'"]|x[0-9A-Fa-f]+|[0-7]{1,3})|[^\\'])'"# => CharLiteral,
    _
}

pub TransalationUnit: TranslationUnit = {
    <TopLevelDecl*> => TranslationUnit { 
        declarations: <>.into_boxed_slice()
    }
}

TopLevelDecl: Declaration = {
  <FunctionDecl> => <>,
  <Decl> => <>,
}

FunctionDecl: Declaration = {
  <FnDeclOpening> ";" => Declaration {
    name: <>.0,
    type_of: <>.1,
    value: None,
  },

  <o:FnDeclOpening> <b:StatementList> => Declaration {
    name: o.0,
    type_of: o.1,
    value: Some(DeclarationValue::Function(b)),
  }
}

#[inline]
FnDeclOpening: (String, Type) = {
  <r:FnTypeSpecifier> <n:Identifier> "(" <args:Comma<FnArg>> ")" => {
    let fn_type = Type::Function(Box::new(FunctionType {
      return_type: r,
      args: args.into(),
    }));

    (String::from(n), fn_type)
  }
}

#[inline]
FnTypeSpecifier: Type = {
  "void" => Type::Void,
  <TypeSpecifier> => <>,
}

FnArg: (String, Type) = {
  <t:TypeSpecifier> <i:Identifier> => (String::from(i), t)
}

Decl: Declaration = {
  <t:TypeSpecifier> <n:Identifier> ";" => Declaration {
    name: String::from(n),
    type_of: t,
    value: None,
  },

  <t:TypeSpecifier> <n:Identifier> "=" <e:Expression> ";" => Declaration {
    name: String::from(n),
    type_of: t,
    value: Some(DeclarationValue::Variable(e)),
  },
}

// For when we need to "reset" precedence (e.g. inside [] or func args)
ExprNoPrec: Expression = {
  <Expression> => <>
}

Expression: Expression = {
  #[precedence(level="0")]
  "(" <Expression> ")" => <>,
  <IntLiteral> => Expression::IntLiteral(u64::from_str(<>).unwrap()),
  <CharLiteral> =>? 
    Err(ParseError::User { error: "Char literals not supported yet :(" }),

  #[precedence(level="1")] #[assoc(side="left")]
  <Identifier> => Expression::Identifier(String::from(<>)),

  #[precedence(level="2")] #[assoc(side="left")]
  <f:Expression> "(" <a:Comma<ExprNoPrec>> ")" => Expression::FuncCall(Box::new(
    FuncCallExpr {
      func: f,
      args: a.into(),
    }
  )),

  <a:Expression> "[" <i:ExprNoPrec> "]" => 
    Expression::ArrayIndex(parse_binary(a, i)),

  <Expression> "++" => Expression::PostInc(parse_unary(<>)),
  <Expression> "--" => Expression::PostDec(parse_unary(<>)),

  #[precedence(level="3")] #[assoc(side="right")]
  "sizeof" <Expression> => Expression::SizeOf(parse_unary(<>)),
  "&" <Expression> => Expression::AddressOf(parse_unary(<>)),
  "*" <Expression> => Expression::Dereference(parse_unary(<>)),
  "-" <Expression> => Expression::Negate(parse_unary(<>)),
  "~" <Expression> => Expression::BitwiseNot(parse_unary(<>)),
  "!" <Expression> => Expression::LogicalNot(parse_unary(<>)),
  "++" <Expression> => Expression::PreInc(parse_unary(<>)),
  "--" <Expression> => Expression::PreDec(parse_unary(<>)),
  "(" <t:TypeSpecifier> ")" <e:Expression> => Expression::Cast(Box::new(
    CastExpr {
      cast_to: t,
      expr: e,
    }
  )),

  #[precedence(level="4")] #[assoc(side="left")]
  <l:Expression> "*" <r:Expression> => Expression::Multiply(parse_binary(l,r)),
  <l:Expression> "/" <r:Expression> => Expression::Divide(parse_binary(l,r)),
  <l:Expression> "%" <r:Expression> => Expression::Modulo(parse_binary(l,r)),

  #[precedence(level="5")] #[assoc(side="left")]
  <l:Expression> "+" <r:Expression> => Expression::Add(parse_binary(l,r)),
  <l:Expression> "-" <r:Expression> => Expression::Subtract(parse_binary(l,r)),
  
  #[precedence(level="6")] #[assoc(side="left")]
  <l:Expression> "<<" <r:Expression> => Expression::ShiftLeft(parse_binary(l,r)),
  <l:Expression> ">>" <r:Expression> => Expression::ShiftRight(parse_binary(l,r)),
  
  #[precedence(level="7")] #[assoc(side="left")]
  <l:Expression> "<" <r:Expression> => Expression::LTCompare(parse_binary(l,r)),
  <l:Expression> ">" <r:Expression> => Expression::GTCompare(parse_binary(l,r)),
  <l:Expression> "<=" <r:Expression> => Expression::LECompare(parse_binary(l,r)),
  <l:Expression> ">=" <r:Expression> => Expression::GECompare(parse_binary(l,r)),

  #[precedence(level="8")] #[assoc(side="left")]
  <l:Expression> "==" <r:Expression> => Expression::Equality(parse_binary(l,r)),
  <l:Expression> "!=" <r:Expression> => Expression::Inequality(parse_binary(l,r)),

  #[precedence(level="9")] #[assoc(side="left")]
  <l:Expression> "&" <r:Expression> => Expression::BitwiseAnd(parse_binary(l,r)),

  #[precedence(level="10")] #[assoc(side="left")]
  <l:Expression> "^" <r:Expression> => Expression::BitwiseXor(parse_binary(l,r)),

  #[precedence(level="11")] #[assoc(side="left")]
  <l:Expression> "|" <r:Expression> => Expression::BitwiseOr(parse_binary(l,r)),

  #[precedence(level="12")] #[assoc(side="left")]
  <l:Expression> "&&" <r:Expression> => Expression::LogicalAnd(parse_binary(l,r)),

  #[precedence(level="13")] #[assoc(side="left")]
  <l:Expression> "||" <r:Expression> => Expression::LogicalOr(parse_binary(l,r)),

  #[precedence(level="14")] #[assoc(side="right")]
  <c:Expression> "?" <t:Expression> ":" <f:Expression> => Expression::Ternary(
    Box::new(TernaryExpr {
      condition: c,
      true_expr: t,
      false_expr: f,
    })
  ),

  #[precedence(level="15")] #[assoc(side="right")]
  <l:Expression> "=" <r:Expression> => Expression::Assignment(parse_binary(l,r)),
}

TypeSpecifier: Type = {
  <TypeSpecifier> "*" => Type::Pointer(Box::new(<>)),

  "signed" <TypeSpecifier> =>? match <> {
    Type::Uint8 => Ok(Type::Int8),
    Type::Uint16 => Ok(Type::Int16),
    Type::Uint32 => Ok(Type::Int32),
    Type::Uint64 => Ok(Type::Int64),

    Type::Int8 => Ok(Type::Int8),
    Type::Int16 => Ok(Type::Int16),
    Type::Int32 => Ok(Type::Int32),
    Type::Int64 => Ok(Type::Int64),

    other => 
      Err(ParseError::User { error: "'signed' must preceede an integer type" })
  },

  "unsigned" <TypeSpecifier> =>? match <> {
    Type::Int8 => Ok(Type::Uint8),
    Type::Int16 => Ok(Type::Uint16),
    Type::Int32 => Ok(Type::Uint32),
    Type::Int64 => Ok(Type::Uint64),

    Type::Uint8 => Ok(Type::Uint8),
    Type::Uint16 => Ok(Type::Uint16),
    Type::Uint32 => Ok(Type::Uint32),
    Type::Uint64 => Ok(Type::Uint64),

    other =>
      Err(ParseError::User { error: "'unsigned' must preceede an integer type" })
  },

  <InnerTypeSpecifier> => <>
}

InnerTypeSpecifier: Type = {
  "char" => Type::Int8,
  "short" => Type::Int16,
  "int" => Type::Int32,
  "long" => Type::Int64,
  "float" => Type::Float,
  "double" => Type::Double,
}

StatementList: Box<[Statement]> = {
  "{" <Statement*> "}" => <>.into_boxed_slice(),
}

Statement: Statement = {
  <OpenStmt> => <>,
  <ClosedStmt> => <>,
}

OpenStmt: Statement = {
  "if" "(" <c:Expression> ")" <i:Statement> => parse_if(c, i, None),
  "if" "(" <c:Expression> ")" <i:ClosedStmt> "else" <e:OpenStmt> =>
    parse_if(c, i, Some(e)),
  "while" "(" <c:Expression> ")" <b:OpenStmt> => parse_while(c, b),
}

ClosedStmt: Statement = {
  <OtherStmt> => <>,
  "if" "(" <c:Expression> ")" <i:ClosedStmt> "else" <e:ClosedStmt> =>
    parse_if(c, i, Some(e)),
  "while" "(" <c:Expression> ")" <b:ClosedStmt> => parse_while(c, b),
}

OtherStmt: Statement = {
  <StatementList> => Statement::Compound(<>),
  <Decl> => Statement::Declaration(<>),
  <Expression> ";" => Statement::Expression(Box::new(<>)),
  "return" <Expression?> ";" => Statement::Return(Box::new(<>)),
}

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};
