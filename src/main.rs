use std::path::PathBuf;
use ast::Context;
use clap::{Parser, ValueEnum};
use codegen::{get_generator, AssemblerOptions};
use colog::basic_builder;
use error::CompilerError;
use log::{debug, info, error, LevelFilter};
use parser::parse;
use preprocessor::preprocess;

pub mod error;
pub mod fs;
pub mod preprocessor;
pub mod ast;
pub mod parser;
pub mod codegen;

#[derive(Debug, Clone, ValueEnum)]
enum LogLevel {
    /// Default setting, outputs errors and warnings only
    Standard,
    /// Outputs informational logs, in addition to the above
    Info,
    /// Outputs the above, plus debugging logs
    Debug,
    /// Outputs the above, plus low-level tracing logs
    Trace,
}

impl From<&LogLevel> for LevelFilter {
    fn from(value: &LogLevel) -> Self {
        match value {
            LogLevel::Standard => Self::Warn,
            LogLevel::Info => Self::Info,
            LogLevel::Debug => Self::Debug,
            LogLevel::Trace => Self::Trace,
        }
    }
}

#[derive(Parser, Debug)]
#[command(version, about, long_about)]
struct CLIArgs {
    /// The .c files to compile
    #[arg(required=true, num_args=1..)]
    files: Vec<PathBuf>,

    /// Compile without linking to an executable
    #[arg(short)]
    compile_only: bool,

    /// Output file path
    #[arg(short, value_name = "PATH")]
    output: Option<PathBuf>,

    /* TODO: This
    /// Define a macro for the preprocessor
    #[arg(short = 'D', value_name = "MACRO")]
    defines: Vec<String>,

    /// Include the given directory in the include search path
    #[arg(short = 'I', value_name = "PATH")]
    includes: Vec<PathBuf>,
    */

    /// Only run the preprocessor and send to STDOUT
    #[arg(short = 'E')]
    preprocess_only: bool,

    /// Don't run the assembler; instead send emitted assembly to STDOUT
    #[arg(short = 'S')]
    emit_assembly: bool,

    /// Print the AST generated by the parser
    #[arg(long)]
    ast: bool,

    /// How detailed should logs be?
    #[arg(short, long, default_value_t = LogLevel::Standard, value_enum)]
    log_level: LogLevel,
}

fn entry() -> Result<(), CompilerError> {
    let args = CLIArgs::parse();

    let mut log_builder = basic_builder();
    log_builder.filter_level(LevelFilter::from(&args.log_level));
    log_builder.init();

    debug!("Starting compiler withs args {:?}", args);

    if args.output.is_some() && args.compile_only && args.files.len() > 1 {
        return Err(CompilerError::InvalidOption("Cannot specify -o when generating multiple output files (e.g. with -c)"));
    }

    let files_preproccessed = args.files.iter().enumerate().map(|(i, ref s)| {
        info!("Preprocessing {}", args.files[i].display());
        preprocess(s)
    });

    if args.preprocess_only {
        for file in files_preproccessed {
            println!("{}", file?);
        }

        return Ok(());
    }

    let files_parsed = files_preproccessed.enumerate().map(|(i, s)| match s {
        Ok(x) => {
            info!("Parsing {}", args.files[i].display());
            let parsed = parse(&x)?;
            info!("Semantically checking {}", args.files[i].display());
            parsed.verify(&mut Context::new())?;
            Ok(parsed)
        },
        Err(e) => Err(e),
    });

    if args.ast {
        for file in files_parsed {
            println!("{:#?}", file?);
        }

        return Ok(());
    }

    let generator = get_generator(&target_lexicon::Architecture::X86_64)?;

    let assembly = files_parsed.enumerate().map(|(i, x)| match x {
        Ok(trans_unit) => {
            info!("Generating assembly for {}", args.files[i].display());
            let asm = generator.generate(&trans_unit)?;
            Ok(asm)
        },
        Err(e) => Err(e),
    });

    if args.emit_assembly {
        for file in assembly {
            println!("{}", file?);
        }

        return Ok(());
    }

    let file_asm_pairs: Result<Box<[(PathBuf, String)]>, CompilerError> = 
        args.files.iter().zip(assembly).map(|(p, a)| {
            match a {
                Ok(x) => Ok((p.clone(), x)),
                Err(e) => Err(e),
            }
        }).collect();

    let asm_options = AssemblerOptions {
        link: !args.compile_only,
        output: args.output.as_ref(),
    };

    generator.assemble(&file_asm_pairs?, &asm_options)?;

    Ok(())
}

fn main() {
    match entry() {
        Ok(_) => (),
        Err(e) => error!("{}", e)
    }
}
