use std::path::PathBuf;
use crate::preprocessor::directive::Directive;
use crate::preprocessor::directive::Definition;

grammar;

match {
    _
} else {
    r"([A-Za-z_][A-Za-z0-9_]*)" => Identifier,
    r"(\.|(\.\.)|(\w*)\/)*\w*\.\w" => FilePath,
} else {
    r"-?\d+(\.\d+)?" => Number,
    r#"[!%^\*&\(\)\-+=\{\}\|\~\[\]\\;:'"<>,./#]+"# => Operator,
}

pub Directive: Directive = {
    "#include <" <Path> ">" => Directive::IncludeGlobal(<>),
    "#include \"" <Path> "\"" => Directive::IncludeLocal(<>),
    "#define" <DefinitionDeclaration> => Directive::Define(<>),
}

Path: PathBuf = {
    <FilePath> => PathBuf::from(<>)
}

DefinitionDeclaration: Definition = {
    <id:Identifier> <def:Definition?> => Definition {
        identifier: String::from(id),
        replacement: def,
    }
}

Definition: String = {
    <CToken+> => <>.join(" ")
}

CToken: String = {
    <Identifier> => String::from(<>),
    <Number> => String::from(<>),
    <Operator> => String::from(<>),
    // TODO: Include string/char literals
}
